{
	"info": {
		"_postman_id": "a770a03a-5e6e-467d-b82d-2cd73a0456a5",
		"name": "Req res API file name",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15037832"
	},
	"item": [
		{
			"name": "Get List Of Users",
			"item": [
				{
					"name": "get list of users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == pm.collectionVariables.get(\"statuscodeListOfUsers\")) {\r",
									"\r",
									"    //status code validation\r",
									"    pm.test(\"Status code validation passed\", function () {\r",
									"      pm.expect(pm.response.code).to.eql(parseInt(pm.collectionVariables.get(\"statuscodeListOfUsers\")))         \r",
									"    });\r",
									"\r",
									"    //Define the JSON schema that you want to validate\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"page\": {\r",
									"                \"type\": \"integer\"\r",
									"            },\r",
									"            \"per_page\": {\r",
									"                \"type\": \"integer\"\r",
									"            },\r",
									"            \"total\": {\r",
									"                \"type\": \"integer\"\r",
									"            },\r",
									"            \"total_pages\": {\r",
									"                \"type\": \"integer\"\r",
									"            },\r",
									"            \"data\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": [\r",
									"                    {\r",
									"                        \"type\": \"object\",\r",
									"                        \"properties\": {\r",
									"                            \"id\": {\r",
									"                                \"type\": \"integer\"\r",
									"                            },\r",
									"                            \"email\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"first_name\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"last_name\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"avatar\": {\r",
									"                                \"type\": \"string\"\r",
									"                            }\r",
									"                        },\r",
									"                        \"required\": [\r",
									"                            \"id\",\r",
									"                            \"email\",\r",
									"                            \"first_name\",\r",
									"                            \"last_name\",\r",
									"                            \"avatar\"\r",
									"                        ]\r",
									"                    },\r",
									"                    {\r",
									"                        \"type\": \"object\",\r",
									"                        \"properties\": {\r",
									"                            \"id\": {\r",
									"                                \"type\": \"integer\"\r",
									"                            },\r",
									"                            \"email\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"first_name\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"last_name\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"avatar\": {\r",
									"                                \"type\": \"string\"\r",
									"                            }\r",
									"                        },\r",
									"                        \"required\": [\r",
									"                            \"id\",\r",
									"                            \"email\",\r",
									"                            \"first_name\",\r",
									"                            \"last_name\",\r",
									"                            \"avatar\"\r",
									"                        ]\r",
									"                    },\r",
									"                    {\r",
									"                        \"type\": \"object\",\r",
									"                        \"properties\": {\r",
									"                            \"id\": {\r",
									"                                \"type\": \"integer\"\r",
									"                            },\r",
									"                            \"email\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"first_name\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"last_name\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"avatar\": {\r",
									"                                \"type\": \"string\"\r",
									"                            }\r",
									"                        },\r",
									"                        \"required\": [\r",
									"                            \"id\",\r",
									"                            \"email\",\r",
									"                            \"first_name\",\r",
									"                            \"last_name\",\r",
									"                            \"avatar\"\r",
									"                        ]\r",
									"                    },\r",
									"                    {\r",
									"                        \"type\": \"object\",\r",
									"                        \"properties\": {\r",
									"                            \"id\": {\r",
									"                                \"type\": \"integer\"\r",
									"                            },\r",
									"                            \"email\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"first_name\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"last_name\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"avatar\": {\r",
									"                                \"type\": \"string\"\r",
									"                            }\r",
									"                        },\r",
									"                        \"required\": [\r",
									"                            \"id\",\r",
									"                            \"email\",\r",
									"                            \"first_name\",\r",
									"                            \"last_name\",\r",
									"                            \"avatar\"\r",
									"                        ]\r",
									"                    },\r",
									"                    {\r",
									"                        \"type\": \"object\",\r",
									"                        \"properties\": {\r",
									"                            \"id\": {\r",
									"                                \"type\": \"integer\"\r",
									"                            },\r",
									"                            \"email\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"first_name\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"last_name\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"avatar\": {\r",
									"                                \"type\": \"string\"\r",
									"                            }\r",
									"                        },\r",
									"                        \"required\": [\r",
									"                            \"id\",\r",
									"                            \"email\",\r",
									"                            \"first_name\",\r",
									"                            \"last_name\",\r",
									"                            \"avatar\"\r",
									"                        ]\r",
									"                    },\r",
									"                    {\r",
									"                        \"type\": \"object\",\r",
									"                        \"properties\": {\r",
									"                            \"id\": {\r",
									"                                \"type\": \"integer\"\r",
									"                            },\r",
									"                            \"email\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"first_name\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"last_name\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"avatar\": {\r",
									"                                \"type\": \"string\"\r",
									"                            }\r",
									"                        },\r",
									"                        \"required\": [\r",
									"                            \"id\",\r",
									"                            \"email\",\r",
									"                            \"first_name\",\r",
									"                            \"last_name\",\r",
									"                            \"avatar\"\r",
									"                        ]\r",
									"                    }\r",
									"                ]\r",
									"            },\r",
									"            \"support\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"url\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"text\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"url\",\r",
									"                    \"text\"\r",
									"                ]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"page\",\r",
									"            \"per_page\",\r",
									"            \"total\",\r",
									"            \"total_pages\",\r",
									"            \"data\",\r",
									"            \"support\"\r",
									"        ]\r",
									"    }\r",
									"\r",
									"    //Validate the response body\r",
									"    pm.test('Schema validation', () => {\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"\r",
									"    pm.test(\"total field validation from response body\", function () {\r",
									"        pm.expect(pm.response.json().total).to.eql(parseInt(pm.environment.get(\"Total\")));\r",
									"    });\r",
									"\r",
									"    // pm.test(\"email validation from response body for id = 7\", function () {\r",
									"    //     pm.expect(pm.response.json().data[0].email).to.eql(\"michael.lawson@reqres.in\");\r",
									"    // });\r",
									"\r",
									"    //--------------------------\r",
									"    var data_res_body = pm.response.json().data;\r",
									"    var data_res_body1 = []\r",
									"   \r",
									"    for (var r in data_res_body) {\r",
									"        var r1 = data_res_body[r]\r",
									"        if (r1.id == parseInt(pm.collectionVariables.get(\"id\"))) {\r",
									"            pm.test(\"email validation from response body for id \" + r1.id, function () {\r",
									"                pm.expect(r1.email).to.eql(pm.collectionVariables.get(\"email\"));\r",
									"            });\r",
									"        }\r",
									"    }\r",
									"\r",
									"    //---------------------------\r",
									"\r",
									"    let contentType_val = pm.response.headers.get(\"Content-Type\");\r",
									"\r",
									"    pm.test(\"Content-Type validation\", function () {\r",
									"        pm.expect(contentType_val).to.eql(pm.globals.get(\"content-type\"));\r",
									"    });\r",
									"\r",
									"\r",
									"    pm.test(\"Response time is less than 1000ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"    });\r",
									"\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code validation\", function () {\r",
									"        pm.response.to.have.status(parseInt(pm.collectionVariables.get(\"statuscodeListOfUsers\")));\r",
									"    });\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetSingleUser",
			"item": [
				{
					"name": "get single user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == pm.collectionVariables.get(\"statuscodeListOfUsers\")) {\r",
									"\r",
									"    //status code validation\r",
									"    pm.test(\"Status code validation passed\", function () {\r",
									"        pm.expect(pm.response.code).to.eql(parseInt(pm.collectionVariables.get(\"statuscodeListOfUsers\")))\r",
									"    });\r",
									"\r",
									"    //Define the JSON schema that you want to validate\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"data\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"id\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"email\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"first_name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"last_name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"avatar\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"id\",\r",
									"                    \"email\",\r",
									"                    \"first_name\",\r",
									"                    \"last_name\",\r",
									"                    \"avatar\"\r",
									"                ]\r",
									"            },\r",
									"            \"support\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"url\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"text\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"url\",\r",
									"                    \"text\"\r",
									"                ]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"data\",\r",
									"            \"support\"\r",
									"        ]\r",
									"    }\r",
									"    //Validate the response body\r",
									"    pm.test('Schema validation', () => {\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"\r",
									"    \r",
									"    //--------------------------\r",
									"    pm.test(\"first_name validation\", function () {\r",
									"        pm.expect(pm.response.json().data.first_name).to.eql(pm.collectionVariables.get(\"first_name\"));\r",
									"    });\r",
									"\r",
									"       //---------------------------\r",
									"\r",
									"    let contentType_val = pm.response.headers.get(\"Content-Type\");\r",
									"\r",
									"    pm.test(\"Content-Type validation\", function () {\r",
									"        pm.expect(contentType_val).to.eql(pm.globals.get(\"content-type\"));\r",
									"    });\r",
									"\r",
									"\r",
									"    pm.test(\"Response time is less than 1000ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"    });\r",
									"\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code validation\", function () {\r",
									"        pm.response.to.have.status(parseInt(pm.collectionVariables.get(\"statuscodeListOfUsers\")));\r",
									"    });\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/{{id}}",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"{{id}}"
							]
						}
					},
					"response": [
						{
							"name": "get single user Example",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users/{{id}}",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"{{id}}"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"description": "",
									"type": "default"
								}
							],
							"cookie": [],
							"body": "{\r\n    \"data\": {\r\n        \"id\": 8,\r\n        \"email\": \"lindsay.ferguson@reqres.in\",\r\n        \"first_name\": \"Lindsay\",\r\n        \"last_name\": \"Ferguson\",\r\n        \"avatar\": \"https://reqres.in/img/faces/8-image.jpg\"\r\n    },\r\n    \"support\": {\r\n        \"url\": \"https://contentcaddy.io?utm_source=reqres&utm_medium=json&utm_campaign=referral\",\r\n        \"text\": \"Tired of writing endless social media content? Let Content Caddy generate it for you.\"\r\n    }\r\n}"
						}
					]
				}
			]
		},
		{
			"name": "CreateUser",
			"item": [
				{
					"name": "CreateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == pm.collectionVariables.get(\"statuscodeCreateUser\")) {\r",
									"\r",
									"    //status code validation\r",
									"    pm.test(\"Status code validation passed\", function () {\r",
									"        pm.expect(pm.response.code).to.eql(parseInt(pm.collectionVariables.get(\"statuscodeCreateUser\")))\r",
									"    });\r",
									"\r",
									"    //Define the JSON schema that you want to validate\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"name\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"job\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"id\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"createdAt\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"name\",\r",
									"            \"job\",\r",
									"            \"id\",\r",
									"            \"createdAt\"\r",
									"        ]\r",
									"    }\r",
									"    //Validate the response body\r",
									"    pm.test('Schema validation', () => {\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"\r",
									"\r",
									"    //--------------------------\r",
									"    pm.test(\"name validation\", function () {\r",
									"        pm.expect(pm.response.json().name).to.eql(pm.collectionVariables.get(\"name\"));\r",
									"    });\r",
									"\r",
									"    //---------------------------\r",
									"\r",
									"    let contentType_val = pm.response.headers.get(\"Content-Type\");\r",
									"\r",
									"    pm.test(\"Content-Type validation\", function () {\r",
									"        pm.expect(contentType_val).to.eql(pm.globals.get(\"content-type\"));\r",
									"    });\r",
									"\r",
									"\r",
									"    pm.test(\"Response time is less than 1000ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"    });\r",
									"\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code validation\", function () {\r",
									"        pm.response.to.have.status(parseInt(pm.collectionVariables.get(\"statuscodeCreateUser\")));\r",
									"    });\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update user",
			"item": [
				{
					"name": "UpdateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == pm.collectionVariables.get(\"statuscodeListOfUsers\")) {\r",
									"\r",
									"    //status code validation\r",
									"    pm.test(\"Status code validation passed\", function () {\r",
									"        pm.expect(pm.response.code).to.eql(parseInt(pm.collectionVariables.get(\"statuscodeListOfUsers\")))\r",
									"    });\r",
									"\r",
									"    //Define the JSON schema that you want to validate\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"name\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"job\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"updatedAt\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"name\",\r",
									"            \"job\",\r",
									"            \"updatedAt\"\r",
									"        ]\r",
									"    }   //Validate the response body\r",
									"    pm.test('Schema validation', () => {\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"\r",
									"\r",
									"    //--------------------------\r",
									"    pm.test(\"name validation\", function () {\r",
									"        pm.expect(pm.response.json().job).to.eql(pm.collectionVariables.get(\"job\"));\r",
									"    });\r",
									"\r",
									"    //---------------------------\r",
									"\r",
									"    let contentType_val = pm.response.headers.get(\"Content-Type\");\r",
									"\r",
									"    pm.test(\"Content-Type validation\", function () {\r",
									"        pm.expect(contentType_val).to.eql(pm.globals.get(\"content-type\"));\r",
									"    });\r",
									"\r",
									"\r",
									"    pm.test(\"Response time is less than 1000ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"    });\r",
									"\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code validation\", function () {\r",
									"        pm.response.to.have.status(parseInt(pm.collectionVariables.get(\"statuscodeListOfUsers\")));\r",
									"    });\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Patch user",
			"item": [
				{
					"name": "PatchUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == pm.collectionVariables.get(\"statuscodeListOfUsers\")) {\r",
									"\r",
									"    //status code validation\r",
									"    pm.test(\"Status code validation passed\", function () {\r",
									"        pm.expect(pm.response.code).to.eql(parseInt(pm.collectionVariables.get(\"statuscodeListOfUsers\")))\r",
									"    });\r",
									"\r",
									"    //Define the JSON schema that you want to validate\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"name\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"job\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"updatedAt\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"name\",\r",
									"            \"job\",\r",
									"            \"updatedAt\"\r",
									"        ]\r",
									"    }   //Validate the response body\r",
									"    pm.test('Schema validation', () => {\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"\r",
									"\r",
									"    //--------------------------\r",
									"    pm.test(\"name validation\", function () {\r",
									"        pm.expect(pm.response.json().job).to.eql(pm.collectionVariables.get(\"job\"));\r",
									"    });\r",
									"\r",
									"    //---------------------------\r",
									"\r",
									"    let contentType_val = pm.response.headers.get(\"Content-Type\");\r",
									"\r",
									"    pm.test(\"Content-Type validation\", function () {\r",
									"        pm.expect(contentType_val).to.eql(pm.globals.get(\"content-type\"));\r",
									"    });\r",
									"\r",
									"\r",
									"    pm.test(\"Response time is less than 1000ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"    });\r",
									"\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code validation\", function () {\r",
									"        pm.response.to.have.status(parseInt(pm.collectionVariables.get(\"statuscodeListOfUsers\")));\r",
									"    });\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete user",
			"item": [
				{
					"name": "DeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == pm.collectionVariables.get(\"statuscodeDeleteUser\")) {\r",
									"\r",
									"    //status code validation\r",
									"    pm.test(\"Status code validation passed\", function () {\r",
									"        pm.expect(pm.response.code).to.eql(parseInt(pm.collectionVariables.get(\"statuscodeDeleteUser\")))\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code validation\", function () {\r",
									"        pm.response.to.have.status(parseInt(pm.collectionVariables.get(\"statuscodeDeleteUser\")));\r",
									"    });\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "statuscodeListOfUsers",
			"value": "200",
			"type": "default"
		},
		{
			"key": "id",
			"value": "8",
			"type": "default"
		},
		{
			"key": "email",
			"value": "lindsay.ferguson@reqres.in",
			"type": "default"
		},
		{
			"key": "first_name",
			"value": "Lindsay",
			"type": "default"
		},
		{
			"key": "statuscodeCreateUser",
			"value": "201",
			"type": "default"
		},
		{
			"key": "name",
			"value": "morpheus",
			"type": "default"
		},
		{
			"key": "job",
			"value": "zion resident",
			"type": "default"
		},
		{
			"key": "statuscodeDeleteUser",
			"value": "204",
			"type": "default"
		}
	]
}
